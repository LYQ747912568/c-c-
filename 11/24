#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h> //定义输入/输出函数

//int main()
//{
//	int arr[10] = { 0 };
//	printf("%p\n", arr);
//	printf("%p\n", &arr);
//	return 0;
//}
//
//void print_arr1(int arr[3][5], int row, int col)
//{
//	int i = 0; 
//	for (i = 0; i<row; i++) 
//	{ 
//		for (j = 0; j<col; j++) 
//		{ 
//			printf("%d ", arr[i][j]);
//		}
//		printf("\n");
//
//	} 
//}
//void print_arr2(int(*arr)[5], int row, int col)
//{ 
//	int i = 0; 
//	for (i = 0;
//		i<row; i++) 
//	{ 
//		for (j = 0; j<col; j++) 
//		{ 
//			printf("%d ", arr[i][j]);
//		} 
//		printf("\n");
//	}
//} 
//int main() 
//{
//int arr[3][5] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//print_arr1(arr, 3, 5); 
////数组名arr，表示首元素的地址
////但是二维数组的首元素是二维数组的第一行
////所以这里传递的arr，其实相当于第一行的地址，是一维数组的地址
////可以数组指针来接收 
//print_arr2(arr, 3, 5); 
//return 0;
//} 


//int main()
//{
//	char arr[] = "abcdef";
//	printf("%d\n", sizeof(arr)); //7
//	printf("%d\n", sizeof(arr + 0)); //4
//	printf("%d\n", sizeof(*arr)); //1
//	printf("%d\n", sizeof(arr[1])); //1
//	printf("%d\n", sizeof(&arr)); //4
//	printf("%d\n", sizeof(&arr + 1)); //4 
//	printf("%d\n", sizeof(&arr[0] + 1)); //4 
//	printf("%d\n", strlen(arr)); //6
//	printf("%d\n", strlen(arr + 0)); //6
//	printf("%d\n", strlen(*arr));
//	printf("%d\n", strlen(arr[1]));
//	printf("%d\n", strlen(&arr));
//	printf("%d\n", strlen(&arr + 1));
//	printf("%d\n", strlen(&arr[0] + 1));
//	return 0;
//}


int main()
{
	char *p = "abcdef";
	printf("%d\n", sizeof(p)); //4
	printf("%d\n", sizeof(p + 1)); //4
	printf("%d\n", sizeof(*p)); //1
	printf("%d\n", sizeof(p[0])); //1
	printf("%d\n", sizeof(&p)); //4
	printf("%d\n", sizeof(&p + 1)); //4
	printf("%d\n", sizeof(&p[0] + 1)); //4
	printf("%d\n", strlen(p));
	printf("%d\n", strlen(p + 1));
	printf("%d\n", strlen(*p));
	printf("%d\n", strlen(p[0]));
	printf("%d\n", strlen(&p));
	printf("%d\n", strlen(&p + 1));
	printf("%d\n", strlen(&p[0] + 1));
	return 0;
}
//
////二维数组 
//int main()
//{
//int a[3][4] = {0};
//printf("%d\n",sizeof(a)); 
//printf("%d\n",sizeof(a[0][0]));
//printf("%d\n",sizeof(a[0])); 
//printf("%d\n",sizeof(a[0]+1)); 
//printf("%d\n",sizeof(*(a[0]+1)));
//printf("%d\n",sizeof(a+1));
//printf("%d\n",sizeof(*(a+1)));
//printf("%d\n",sizeof(&a[0]+1)); 
//printf("%d\n",sizeof(*(&a[0]+1))); 
//printf("%d\n",sizeof(*a));
//return 0;
//}
