#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h> //定义输入/输出函数

////128  64  32  16   8  4  2  1
//// []  []  []  []  [] [] [] []
//int main()
//{
//	//整数内存 存补码
//	//0x0000000a
//	//00000000 00000000 00000000 00001010 ->正数  原码=补码
//	int a = 10;
//
//	//0x80000014
//  //10000000 00000000 00000000 00010100 // 原码
//	//11111111 11111111 11111111 11101011 // 反码 符号位不变 其余位取反
//	//11111111 11111111 11111111 11101100 //补码 反码+1
//	int b = -20;
//
//	return 0;
//}

//int main()
//{
//
//	int a = 1;
//	int b = 1;
//	a + b;
//	// 00000000 00000000 00000000 00000001
//	// 00000000 00000000 00000000 00000001
//	// 00000000 00000000 00000000 00000010
//
//	a - b;
//	// 00000000 00000000 00000000 00000001
//	// 11111111 11111111 11111111 11111111
//	// 00000000 00000000 00000000 00000000
//	return 0;
//}

//int main()
//{
//	//0x 00 00 00 01
//	//      低       高
//	//小端  01 00 00 00
//	//大端  00 00 00 01
//	int x = 1;
//	char c = (char)x; //截断
//	if (c == 1)
//		printf("小端机\n");
//	else
//	printf("大端机\n");
//	return 0;
//}

//int main()
//{
//	//1整形的存储
//	//2整形提升
//	//3整形的截断
//	//0x 10000000 00000000 00000000 00000001
//	//0x 11111111 11111111 11111111 11111110
//	//0x 11111111 11111111 11111111 11111111
//	char a = -1; 
//	 signed char b=-1;
//	 unsigned char c=-1; 
//	 //截断a/b/c ->0x1111 1111
//	 //char -> int 提升
//	 printf("a=%d,b=%d,c=%d",a,b,c);
//	 return 0;
//}

int main() 
{
	char a = -128;
	printf("%u\n",a);
	return 0;
}
